/**
  Reset

  Additional global resets on top of Normalize.css
*/

html,
:root {
  box-sizing: border-box;
}

html {
  // Changes the default tap highlight to be completely transparent in iOS.
  -webkit-tap-highlight-color: rgba(0,0,0,0);
}

body {
  overflow: hidden;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

* {
  user-select: none;
}

svg {
  pointer-events: none;
}

img {
  // By default, `<img>`s are `inline-block`. This assumes that, and vertically
  // centers them. This won't apply should you reset them to `block` level.
  vertical-align: middle;
  // Note: `<img>`s are deliberately not made responsive by default.
  // For the rationale behind this, see the comments on the `.img-fluid` class.
}


// iOS "clickable elements" fix for role="button"
//
// Fixes "clickability" issue (and more generally, the firing of events such as focus as well)
// for traditionally non-focusable elements with role="button"
// see https://developer.mozilla.org/en-US/docs/Web/Events/click#Safari_Mobile

[role="button"] {
  cursor: pointer;
}

// Avoid 300ms click delay on touch devices that support the `touch-action` CSS property.
//
// In particular, unlike most other browsers, IE11+Edge on Windows 10 on touch devices and IE Mobile 10-11
// DON'T remove the click delay when `<meta name="viewport" content="width=device-width">` is present.
// However, they DO support removing the click delay via `touch-action: manipulation`.
// See:
// * http://v4-alpha.getbootstrap.com/content/reboot/#click-delay-optimization-for-touch
// * http://caniuse.com/#feat=css-touch-action
// * http://patrickhlauke.github.io/touch/tests/results/#suppressing-300ms-delay

a,
area,
button,
[role="button"],
input,
label,
select,
summary,
textarea {
  touch-action: manipulation;
}

/**
  Forms
*/

label {
  // Allow labels to use `margin` for spacing.
  display: inline-block;
  margin-bottom: 0.5rem;
}

input,
button,
select,
textarea {
  // Remove all `margin`s so our classes don't have to do it themselves.
  margin: 0;
  // Normalize includes `font: inherit;`, so `font-family`. `font-size`, etc are
  // properly inherited. However, `line-height` isn't addressed there. Using this
  // ensures we don't need to unnecessarily redeclare the global font stack.
  line-height: inherit;
  // iOS adds rounded borders by default
  border-radius: 0;

  appearance: none;
}

input[type=checkbox] {
  appearance: checkbox;
}

input[type=radio] {
  appearance: radio;
}

textarea {
  // Textareas should really only resize vertically so they don't break their (horizontal) containers.
  resize: vertical;
}

legend {
  // Reset the entire legend element to match the `fieldset`
  display: block;
  width: 100%;
  margin-bottom: 0.5rem;
  padding: 0;

  font-size: 1.5rem;
  line-height: inherit;
}

// Always hide an element with the `hidden` HTML attribute.
[hidden] {
  display: none !important;
}
